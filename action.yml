name: "Create or Update Evolution Container App"
description: "Позволяет создать или обновить существующий Evolution Container App в облаке Cloud.ru Evolution"

inputs:
  client_id:
    description: "Key Id из личного кабинета Cloud.ru"
    required: true
  client_secret:
    required: true
  registry_uri:
    description: "URI реестра в формате cr.cloud.ru/<ид_реестра>. Например: 'cr.cloud.ru/a360ece4-3fef-4d69-b9f9-8f55a43eea84'"
    required: true
  image_name: 
    description: "Имя образа в реестре Evolution Artifact Registry. Например: 'aspnetapp@sha256:079d0f3df65893ef8a2bcf65108781d8fa7a2e3dd2f2606159d376a78026c6d0'"
    required: false
  source_path:
    description: "source code path"
    required: false
  builder:
    description: "paketobuildpacks/builder-jammy-full;heroku/builder:22;gcr.io/buildpacks/builder or MSFT oryx+"
    required: false
    default: 'paketobuildpacks/builder-jammy-full'
  project_id: 
    description: "ИД проекта в ЛК. Например '06363f30-bde4-41a2-a96f-398bf8bd830e'"
    required: true
  name:
    description: "Уникальное имя Evoution Container App. Например 'evolution-20240229'"
    required: false
    default: 'evolution-container-app-${{ github.run_id }}-ra${{ github.run_attempt }}'
  port:
    description: "target port > 1000"
    required: true
runs:
  using: "composite"
  steps:
    - name: Log in to Evolution Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry_uri }}
        username: ${{ inputs.client_id }}
        password: ${{ inputs.client_secret }}
        
    - name: Create Evoution Container App
      shell: bash
      run: |
        echo 'Get Access Token'
        ACCESS_TOKEN=$(curl --data-urlencode "grant_type=client_credentials" \
        --data-urlencode "client_id=$KEYID" \
        --data-urlencode "client_secret=$KEYSECRET" \
        "https://auth.iam.sbercloud.ru/auth/system/openid/token" \
        | jq -r '.access_token')

        if [ "${{ inputs.source_path }}" != "" ]; then
            echo 'Install Build Pack CLI'
            (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.33.2/pack-v0.33.2-${{ runner.os }}.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
    
            echo 'Attempting to enable experimental features for the pack CLI'
            pack config experimental true
    
            echo 'default_builder: ' ${{ inputs.builder }}

            test_img="${{ inputs.name }}"
            echo 'test_img: ' $test_img

            build_command="pack build $test_img --path ${{ inputs.source_path }} --builder ${{ inputs.builder }}"
            echo "build_command=${build_command}" >> $GITHUB_OUTPUT

            pack build $test_img --path ${{ inputs.source_path }} --builder ${{ inputs.builder }}
            docker tag $test_img ${{ inputs.registry_uri }}/$test_img
            docker push ${{ inputs.registry_uri }}/$test_img
            IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ inputs.registry_uri }}/$test_img)
            echo "image_digest=${IMAGE_DIGEST}" >> "$GITHUB_ENV"
        else
            IMAGE_DIGEST=${{ inputs.registry_uri }}/${{ inputs.image_name }}
            echo "image_digest=${IMAGE_DIGEST}" >> "$GITHUB_ENV"

            echo 'docker-image name is already provided.... '
        fi
        
        
            
        echo 'Start creating ECA... ' ${{ inputs.registry_uri }}/${{ inputs.image_name }}

        public_api=$"https://containers.api.cloud.ru/v1/containers" # current beta endpoint
        echo 'public_api: ' $public_api
        container=$(curl --location $public_api \
        --header 'Content-Type: application/json' \
        --header "Authorization: Bearer $ACCESS_TOKEN" \
        --data '{ 
              "projectId": "${{ inputs.project_id }}",
              "name": "${{ inputs.name }}",
              "description": "Этот Container App создан через GitVerse Action",
              "configuration": {
                  "ingress": {
                      "publiclyAccessible": true
                  },
                  "autoDeployments": {
                      "enabled": false,
                      "pattern": "build*"
                  }
              },
              "template": {
                  "containers": [
                      {
                          "name": "${{ inputs.name }}",
                          "image": "${{ inputs.registry_uri }}/${{ inputs.image_name }}",
                          "resources": {
                              "cpu": "0.1",
                              "memory": "256Mi"
                          },
                          "containerPort": ${{ inputs.port }}
                      }
                  ],
                  "scaling": {
                    "minInstanceCount": 0,
                    "maxInstanceCount": 2,
                    "rule": {
                        "type": "concurrency",
                        "value": {
                            "soft": 100,
                            "hard": 0
                        }
                    }
                 },
                 "timeout": "600s",
                 "protocol": "http_1"
              }
          }'\
          | jq -r)

          echo 'this is output' $container
          echo 'End creating ECA with '$IMAGE_DIGEST
          echo 'container.id ' ${{container.id}}
          echo 'container.code ' ${{container.code}}
          if [ $container.code == 1 ]; then
            echo 'Start updating ECA with $IMAGE_DIGEST'
            curl --location --request PATCH $public_api/${{ inputs.name }} \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --data '{ 
              "projectId": "${{ inputs.project_id }}",
              "name": "${{ inputs.name }}",
              "description": "Этот Container App создан через GitVerse Action",
              "configuration": {
                  "ingress": {
                      "publiclyAccessible": true
                  },
                  "autoDeployments": {
                      "enabled": false,
                      "pattern": "build*"
                  }
              },
              "template": {
                  "containers": [
                      {
                          "name": "${{ inputs.name }}",
                          "image": "${{ inputs.registry_uri }}/${{ inputs.image_name }}",
                          "resources": {
                              "cpu": "0.1",
                              "memory": "256Mi"
                          },
                          "containerPort": ${{ inputs.port }}
                      }
                  ],
                  "scaling": {
                    "minInstanceCount": 0,
                    "maxInstanceCount": 2,
                    "rule": {
                        "type": "concurrency",
                        "value": {
                            "soft": 100,
                            "hard": 0
                        }
                    }
                 },
                 "timeout": "600s",
                 "protocol": "http_1"
              }
          }'
            echo 'End updating ECA with $IMAGE_DIGEST'
          else

            echo 'End updating ECA: something went wrong(((( or we just created a new container app, no update needed'
          fi
        echo 'End updating ECA with $IMAGE_DIGEST'
      env:
        KEYID: ${{ inputs.client_id }}
        KEYSECRET: ${{ inputs.client_secret }}
        
